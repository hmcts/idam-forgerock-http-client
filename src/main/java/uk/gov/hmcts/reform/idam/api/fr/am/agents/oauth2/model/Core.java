/*
 * ForgeRock AM OAuth2Client API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.hmcts.reform.idam.api.fr.am.agents.oauth2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Core
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-21T15:18:23.026Z")
public class Core {
  @JsonProperty("agentgroup")
  private String agentgroup = null;

  @JsonProperty("status")
  private String status = null;

  @JsonProperty("userpassword")
  private String userpassword = null;

  @JsonProperty("clientType")
  private String clientType = null;

  @JsonProperty("redirectionUris")
  private List<String> redirectionUris = null;

  @JsonProperty("scopes")
  private List<String> scopes = null;

  @JsonProperty("defaultScopes")
  private List<String> defaultScopes = null;

  @JsonProperty("clientName")
  private List<String> clientName = null;

  @JsonProperty("authorizationCodeLifetime")
  private Integer authorizationCodeLifetime = null;

  @JsonProperty("refreshTokenLifetime")
  private Integer refreshTokenLifetime = null;

  @JsonProperty("accessTokenLifetime")
  private Integer accessTokenLifetime = null;

  public Core agentgroup(String agentgroup) {
    this.agentgroup = agentgroup;
    return this;
  }

   /**
   * Add the client to a group to allow inheritance of property values from the group. &lt;br&gt;Changing the group will update inherited property values. &lt;br&gt;Remove the group by selecting the name and pressing &lt;code&gt;BACKSPACE&lt;/code&gt;. Inherited property values are copied to the client.
   * @return agentgroup
  **/
  @ApiModelProperty(value = "Add the client to a group to allow inheritance of property values from the group. <br>Changing the group will update inherited property values. <br>Remove the group by selecting the name and pressing <code>BACKSPACE</code>. Inherited property values are copied to the client.")
  public String getAgentgroup() {
    return agentgroup;
  }

  public void setAgentgroup(String agentgroup) {
    this.agentgroup = agentgroup;
  }

  public Core status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the agent configuration.
   * @return status
  **/
  @ApiModelProperty(value = "Status of the agent configuration.")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public Core userpassword(String userpassword) {
    this.userpassword = userpassword;
    return this;
  }

   /**
   * Client secret. Used when the client authenticates to OpenAM.
   * @return userpassword
  **/
  @ApiModelProperty(value = "Client secret. Used when the client authenticates to OpenAM.")
  public String getUserpassword() {
    return userpassword;
  }

  public void setUserpassword(String userpassword) {
    this.userpassword = userpassword;
  }

  public Core clientType(String clientType) {
    this.clientType = clientType;
    return this;
  }

   /**
   * Type of OAuth 2.0 client. Confidential clients can keep their password secret, and are typically web apps or other server-based clients. Public clients run the risk of exposing their password to a host or user agent, such as rich browser applications or desktop clients.
   * @return clientType
  **/
  @ApiModelProperty(value = "Type of OAuth 2.0 client. Confidential clients can keep their password secret, and are typically web apps or other server-based clients. Public clients run the risk of exposing their password to a host or user agent, such as rich browser applications or desktop clients.")
  public String getClientType() {
    return clientType;
  }

  public void setClientType(String clientType) {
    this.clientType = clientType;
  }

  public Core redirectionUris(List<String> redirectionUris) {
    this.redirectionUris = redirectionUris;
    return this;
  }

  public Core addRedirectionUrisItem(String redirectionUrisItem) {
    if (this.redirectionUris == null) {
      this.redirectionUris = new ArrayList<>();
    }
    this.redirectionUris.add(redirectionUrisItem);
    return this;
  }

   /**
   * Redirection URIs (optional for confidential clients). Complete URIs or URIs consisting of protocol + authority + path are registered so that the OAuth 2.0 provider can trust that tokens are sent to trusted entities. If multiple URI&#39;s are registered, the client MUST specify the URI that the user should be redirected to following approval. May not contain a fragment (#).
   * @return redirectionUris
  **/
  @ApiModelProperty(value = "Redirection URIs (optional for confidential clients). Complete URIs or URIs consisting of protocol + authority + path are registered so that the OAuth 2.0 provider can trust that tokens are sent to trusted entities. If multiple URI's are registered, the client MUST specify the URI that the user should be redirected to following approval. May not contain a fragment (#).")
  public List<String> getRedirectionUris() {
    return redirectionUris;
  }

  public void setRedirectionUris(List<String> redirectionUris) {
    this.redirectionUris = redirectionUris;
  }

  public Core scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public Core addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Scope(s). Scopes are strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.&lt;br&gt;&lt;br&gt;Scopes may be entered as simple strings or pipe separated strings representing the internal scope name, locale, and localized description; e.g. \&quot;read|en|Permission to view email messages in your account\&quot;. Locale strings are in the format &lt;code&gt;language + \&quot;_\&quot; + country + \&quot;_\&quot; + variant&lt;/code&gt;, e.g. en, en_GB, en_US_WIN. If the locale and pipe is omitted, the description is displayed to all users having undefined locales. e.g. \&quot;read|Permission to view email messages in your account\&quot;. &lt;i&gt;NB&lt;/i&gt; If the description is also omitted, nothing is displayed to all users, e.g. specifying \&quot;read|\&quot; would allow the scope \&quot;read\&quot; to be used by the client, but would not display it to the user when it was requested.
   * @return scopes
  **/
  @ApiModelProperty(value = "Scope(s). Scopes are strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.<br><br>Scopes may be entered as simple strings or pipe separated strings representing the internal scope name, locale, and localized description; e.g. \"read|en|Permission to view email messages in your account\". Locale strings are in the format <code>language + \"_\" + country + \"_\" + variant</code>, e.g. en, en_GB, en_US_WIN. If the locale and pipe is omitted, the description is displayed to all users having undefined locales. e.g. \"read|Permission to view email messages in your account\". <i>NB</i> If the description is also omitted, nothing is displayed to all users, e.g. specifying \"read|\" would allow the scope \"read\" to be used by the client, but would not display it to the user when it was requested.")
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }

  public Core defaultScopes(List<String> defaultScopes) {
    this.defaultScopes = defaultScopes;
    return this;
  }

  public Core addDefaultScopesItem(String defaultScopesItem) {
    if (this.defaultScopes == null) {
      this.defaultScopes = new ArrayList<>();
    }
    this.defaultScopes.add(defaultScopesItem);
    return this;
  }

   /**
   * Default Scope(s). Scopes automatically given to tokens.&lt;br&gt;&lt;br&gt;Default Scopes may be entered as simple strings or pipe separated strings representing the internal scope name, locale, and localized description; e.g. \&quot;read|en|Permission to view email messages in your account\&quot;. Locale strings are in the format &lt;code&gt;language + \&quot;_\&quot; + country + \&quot;_\&quot; + variant&lt;/code&gt;, e.g. en, en_GB, en_US_WIN. If the locale and pipe is omitted, the description is displayed to all users having undefined locales. e.g. \&quot;read|Permission to view email messages in your account\&quot;. &lt;i&gt;NB&lt;/i&gt; If the description is also omitted, nothing is displayed to all users, e.g. specifying \&quot;read|\&quot; would allow the scope \&quot;read\&quot; to be used by the client, but would not display it to the user when it was requested.
   * @return defaultScopes
  **/
  @ApiModelProperty(value = "Default Scope(s). Scopes automatically given to tokens.<br><br>Default Scopes may be entered as simple strings or pipe separated strings representing the internal scope name, locale, and localized description; e.g. \"read|en|Permission to view email messages in your account\". Locale strings are in the format <code>language + \"_\" + country + \"_\" + variant</code>, e.g. en, en_GB, en_US_WIN. If the locale and pipe is omitted, the description is displayed to all users having undefined locales. e.g. \"read|Permission to view email messages in your account\". <i>NB</i> If the description is also omitted, nothing is displayed to all users, e.g. specifying \"read|\" would allow the scope \"read\" to be used by the client, but would not display it to the user when it was requested.")
  public List<String> getDefaultScopes() {
    return defaultScopes;
  }

  public void setDefaultScopes(List<String> defaultScopes) {
    this.defaultScopes = defaultScopes;
  }

  public Core clientName(List<String> clientName) {
    this.clientName = clientName;
    return this;
  }

  public Core addClientNameItem(String clientNameItem) {
    if (this.clientName == null) {
      this.clientName = new ArrayList<>();
    }
    this.clientName.add(clientNameItem);
    return this;
  }

   /**
   * This value is a readable name for this client.
   * @return clientName
  **/
  @ApiModelProperty(value = "This value is a readable name for this client.")
  public List<String> getClientName() {
    return clientName;
  }

  public void setClientName(List<String> clientName) {
    this.clientName = clientName;
  }

  public Core authorizationCodeLifetime(Integer authorizationCodeLifetime) {
    this.authorizationCodeLifetime = authorizationCodeLifetime;
    return this;
  }

   /**
   * The time in seconds an authorization code is valid for. &lt;i&gt;NB&lt;/i&gt; If this field is set to zero, Authorization Code Lifetime of the OAuth2 Provider is used instead of.
   * @return authorizationCodeLifetime
  **/
  @ApiModelProperty(value = "The time in seconds an authorization code is valid for. <i>NB</i> If this field is set to zero, Authorization Code Lifetime of the OAuth2 Provider is used instead of.")
  public Integer getAuthorizationCodeLifetime() {
    return authorizationCodeLifetime;
  }

  public void setAuthorizationCodeLifetime(Integer authorizationCodeLifetime) {
    this.authorizationCodeLifetime = authorizationCodeLifetime;
  }

  public Core refreshTokenLifetime(Integer refreshTokenLifetime) {
    this.refreshTokenLifetime = refreshTokenLifetime;
    return this;
  }

   /**
   * The time in seconds a refresh token is valid for. &lt;i&gt;NB&lt;/i&gt; If this field is set to zero, Refresh Token Lifetime of the OAuth2 Provider is used instead. If this field is set to -1, the token will never expire.
   * @return refreshTokenLifetime
  **/
  @ApiModelProperty(value = "The time in seconds a refresh token is valid for. <i>NB</i> If this field is set to zero, Refresh Token Lifetime of the OAuth2 Provider is used instead. If this field is set to -1, the token will never expire.")
  public Integer getRefreshTokenLifetime() {
    return refreshTokenLifetime;
  }

  public void setRefreshTokenLifetime(Integer refreshTokenLifetime) {
    this.refreshTokenLifetime = refreshTokenLifetime;
  }

  public Core accessTokenLifetime(Integer accessTokenLifetime) {
    this.accessTokenLifetime = accessTokenLifetime;
    return this;
  }

   /**
   * The time in seconds an access token is valid for. &lt;i&gt;NB&lt;/i&gt; If this field is set to zero, Access Token Lifetime of the OAuth2 Provider is used instead of.
   * @return accessTokenLifetime
  **/
  @ApiModelProperty(value = "The time in seconds an access token is valid for. <i>NB</i> If this field is set to zero, Access Token Lifetime of the OAuth2 Provider is used instead of.")
  public Integer getAccessTokenLifetime() {
    return accessTokenLifetime;
  }

  public void setAccessTokenLifetime(Integer accessTokenLifetime) {
    this.accessTokenLifetime = accessTokenLifetime;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Core core = (Core) o;
    return Objects.equals(this.agentgroup, core.agentgroup) &&
        Objects.equals(this.status, core.status) &&
        Objects.equals(this.userpassword, core.userpassword) &&
        Objects.equals(this.clientType, core.clientType) &&
        Objects.equals(this.redirectionUris, core.redirectionUris) &&
        Objects.equals(this.scopes, core.scopes) &&
        Objects.equals(this.defaultScopes, core.defaultScopes) &&
        Objects.equals(this.clientName, core.clientName) &&
        Objects.equals(this.authorizationCodeLifetime, core.authorizationCodeLifetime) &&
        Objects.equals(this.refreshTokenLifetime, core.refreshTokenLifetime) &&
        Objects.equals(this.accessTokenLifetime, core.accessTokenLifetime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentgroup, status, userpassword, clientType, redirectionUris, scopes, defaultScopes, clientName, authorizationCodeLifetime, refreshTokenLifetime, accessTokenLifetime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Core {\n");
    
    sb.append("    agentgroup: ").append(toIndentedString(agentgroup)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userpassword: ").append(toIndentedString(userpassword)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    redirectionUris: ").append(toIndentedString(redirectionUris)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    defaultScopes: ").append(toIndentedString(defaultScopes)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    authorizationCodeLifetime: ").append(toIndentedString(authorizationCodeLifetime)).append("\n");
    sb.append("    refreshTokenLifetime: ").append(toIndentedString(refreshTokenLifetime)).append("\n");
    sb.append("    accessTokenLifetime: ").append(toIndentedString(accessTokenLifetime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

