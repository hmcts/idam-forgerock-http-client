/*
 * ForgeRock AM Agents API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5.5.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.hmcts.reform.idam.api.fr.am.agents.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * AmAgent
 */
@javax.annotation.processing.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-25T13:48:57.857Z")
public class AmAgent {
    @JsonProperty("_id")
    private String id = null;

    @JsonProperty("_rev")
    private String rev = null;

    @JsonProperty("coreOAuth2ClientConfig")
    private Core coreOAuth2ClientConfig = null;

    @JsonProperty("advancedOAuth2ClientConfig")
    private Advanced advancedOAuth2ClientConfig = null;

    @JsonProperty("coreOpenIDClientConfig")
    private OpenIDConnect coreOpenIDClientConfig = null;

    @JsonProperty("signEncOAuth2ClientConfig")
    private SigningAndEncryption signEncOAuth2ClientConfig = null;

    @JsonProperty("coreUmaClientConfig")
    private UMA coreUmaClientConfig = null;

    public AmAgent id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @ApiModelProperty(value = "")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public AmAgent rev(String rev) {
        this.rev = rev;
        return this;
    }

    /**
     * Get rev
     *
     * @return rev
     **/
    @ApiModelProperty(value = "")
    public String getRev() {
        return rev;
    }

    public void setRev(String rev) {
        this.rev = rev;
    }


    public AmAgent coreOAuth2ClientConfig(Core coreOAuth2ClientConfig) {
        this.coreOAuth2ClientConfig = coreOAuth2ClientConfig;
        return this;
    }

    /**
     * Get coreOAuth2ClientConfig
     *
     * @return coreOAuth2ClientConfig
     **/
    @ApiModelProperty(value = "")
    public Core getCoreOAuth2ClientConfig() {
        return coreOAuth2ClientConfig;
    }

    public void setCoreOAuth2ClientConfig(Core coreOAuth2ClientConfig) {
        this.coreOAuth2ClientConfig = coreOAuth2ClientConfig;
    }

    public AmAgent advancedOAuth2ClientConfig(Advanced advancedOAuth2ClientConfig) {
        this.advancedOAuth2ClientConfig = advancedOAuth2ClientConfig;
        return this;
    }

    /**
     * Get advancedOAuth2ClientConfig
     *
     * @return advancedOAuth2ClientConfig
     **/
    @ApiModelProperty(value = "")
    public Advanced getAdvancedOAuth2ClientConfig() {
        return advancedOAuth2ClientConfig;
    }

    public void setAdvancedOAuth2ClientConfig(Advanced advancedOAuth2ClientConfig) {
        this.advancedOAuth2ClientConfig = advancedOAuth2ClientConfig;
    }

    public AmAgent coreOpenIDClientConfig(OpenIDConnect coreOpenIDClientConfig) {
        this.coreOpenIDClientConfig = coreOpenIDClientConfig;
        return this;
    }

    /**
     * Get coreOpenIDClientConfig
     *
     * @return coreOpenIDClientConfig
     **/
    @ApiModelProperty(value = "")
    public OpenIDConnect getCoreOpenIDClientConfig() {
        return coreOpenIDClientConfig;
    }

    public void setCoreOpenIDClientConfig(OpenIDConnect coreOpenIDClientConfig) {
        this.coreOpenIDClientConfig = coreOpenIDClientConfig;
    }

    public AmAgent signEncOAuth2ClientConfig(SigningAndEncryption signEncOAuth2ClientConfig) {
        this.signEncOAuth2ClientConfig = signEncOAuth2ClientConfig;
        return this;
    }

    /**
     * Get signEncOAuth2ClientConfig
     *
     * @return signEncOAuth2ClientConfig
     **/
    @ApiModelProperty(value = "")
    public SigningAndEncryption getSignEncOAuth2ClientConfig() {
        return signEncOAuth2ClientConfig;
    }

    public void setSignEncOAuth2ClientConfig(SigningAndEncryption signEncOAuth2ClientConfig) {
        this.signEncOAuth2ClientConfig = signEncOAuth2ClientConfig;
    }

    public AmAgent coreUmaClientConfig(UMA coreUmaClientConfig) {
        this.coreUmaClientConfig = coreUmaClientConfig;
        return this;
    }

    /**
     * Get coreUmaClientConfig
     *
     * @return coreUmaClientConfig
     **/
    @ApiModelProperty(value = "")
    public UMA getCoreUmaClientConfig() {
        return coreUmaClientConfig;
    }

    public void setCoreUmaClientConfig(UMA coreUmaClientConfig) {
        this.coreUmaClientConfig = coreUmaClientConfig;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AmAgent amAgent = (AmAgent) o;
        return Objects.equals(this.id, amAgent.id) &&
                Objects.equals(this.rev, amAgent.rev) &&
                Objects.equals(this.coreOAuth2ClientConfig, amAgent.coreOAuth2ClientConfig) &&
                Objects.equals(this.advancedOAuth2ClientConfig, amAgent.advancedOAuth2ClientConfig) &&
                Objects.equals(this.coreOpenIDClientConfig, amAgent.coreOpenIDClientConfig) &&
                Objects.equals(this.signEncOAuth2ClientConfig, amAgent.signEncOAuth2ClientConfig) &&
                Objects.equals(this.coreUmaClientConfig, amAgent.coreUmaClientConfig);
    }

    @Override
    public int hashCode() {
        return Objects.hash(coreOAuth2ClientConfig, advancedOAuth2ClientConfig, coreOpenIDClientConfig, signEncOAuth2ClientConfig, coreUmaClientConfig);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AmAgent {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    rev: ").append(toIndentedString(rev)).append("\n");
        sb.append("    coreOAuth2ClientConfig: ").append(toIndentedString(coreOAuth2ClientConfig)).append("\n");
        sb.append("    advancedOAuth2ClientConfig: ").append(toIndentedString(advancedOAuth2ClientConfig)).append("\n");
        sb.append("    coreOpenIDClientConfig: ").append(toIndentedString(coreOpenIDClientConfig)).append("\n");
        sb.append("    signEncOAuth2ClientConfig: ").append(toIndentedString(signEncOAuth2ClientConfig)).append("\n");
        sb.append("    coreUmaClientConfig: ").append(toIndentedString(coreUmaClientConfig)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

