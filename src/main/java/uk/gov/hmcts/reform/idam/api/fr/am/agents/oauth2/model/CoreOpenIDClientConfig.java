/*
 * ForgeRock AM OAuth2Client API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.hmcts.reform.idam.api.fr.am.agents.oauth2.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * OAuth2ClientCoreOpenIDClientConfig
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-09T15:43:26.593+01:00")
public class CoreOpenIDClientConfig {
  @JsonProperty("clientSessionUri")
  private ConfigJwkSet clientSessionUri = null;

  @JsonProperty("jwtTokenLifetime")
  private ConfigJwksCacheTimeout jwtTokenLifetime = null;

  @JsonProperty("claims")
  private ConfigResponseTypes claims = null;

  @JsonProperty("defaultMaxAge")
  private ConfigJwksCacheTimeout defaultMaxAge = null;

  @JsonProperty("postLogoutRedirectUri")
  private ConfigResponseTypes postLogoutRedirectUri = null;

  @JsonProperty("defaultMaxAgeEnabled")
  private IdTokenEncryptionEnabled defaultMaxAgeEnabled = null;

  public CoreOpenIDClientConfig clientSessionUri(ConfigJwkSet clientSessionUri) {
    this.clientSessionUri = clientSessionUri;
    return this;
  }

   /**
   * Get clientSessionUri
   * @return clientSessionUri
  **/
  @ApiModelProperty(value = "")
  public ConfigJwkSet getClientSessionUri() {
    return clientSessionUri;
  }

  public void setClientSessionUri(ConfigJwkSet clientSessionUri) {
    this.clientSessionUri = clientSessionUri;
  }

  public CoreOpenIDClientConfig jwtTokenLifetime(ConfigJwksCacheTimeout jwtTokenLifetime) {
    this.jwtTokenLifetime = jwtTokenLifetime;
    return this;
  }

   /**
   * Get jwtTokenLifetime
   * @return jwtTokenLifetime
  **/
  @ApiModelProperty(value = "")
  public ConfigJwksCacheTimeout getJwtTokenLifetime() {
    return jwtTokenLifetime;
  }

  public void setJwtTokenLifetime(ConfigJwksCacheTimeout jwtTokenLifetime) {
    this.jwtTokenLifetime = jwtTokenLifetime;
  }

  public CoreOpenIDClientConfig claims(ConfigResponseTypes claims) {
    this.claims = claims;
    return this;
  }

   /**
   * Get claims
   * @return claims
  **/
  @ApiModelProperty(value = "")
  public ConfigResponseTypes getClaims() {
    return claims;
  }

  public void setClaims(ConfigResponseTypes claims) {
    this.claims = claims;
  }

  public CoreOpenIDClientConfig defaultMaxAge(ConfigJwksCacheTimeout defaultMaxAge) {
    this.defaultMaxAge = defaultMaxAge;
    return this;
  }

   /**
   * Get defaultMaxAge
   * @return defaultMaxAge
  **/
  @ApiModelProperty(value = "")
  public ConfigJwksCacheTimeout getDefaultMaxAge() {
    return defaultMaxAge;
  }

  public void setDefaultMaxAge(ConfigJwksCacheTimeout defaultMaxAge) {
    this.defaultMaxAge = defaultMaxAge;
  }

  public CoreOpenIDClientConfig postLogoutRedirectUri(ConfigResponseTypes postLogoutRedirectUri) {
    this.postLogoutRedirectUri = postLogoutRedirectUri;
    return this;
  }

   /**
   * Get postLogoutRedirectUri
   * @return postLogoutRedirectUri
  **/
  @ApiModelProperty(value = "")
  public ConfigResponseTypes getPostLogoutRedirectUri() {
    return postLogoutRedirectUri;
  }

  public void setPostLogoutRedirectUri(ConfigResponseTypes postLogoutRedirectUri) {
    this.postLogoutRedirectUri = postLogoutRedirectUri;
  }

  public CoreOpenIDClientConfig defaultMaxAgeEnabled(IdTokenEncryptionEnabled defaultMaxAgeEnabled) {
    this.defaultMaxAgeEnabled = defaultMaxAgeEnabled;
    return this;
  }

   /**
   * Get defaultMaxAgeEnabled
   * @return defaultMaxAgeEnabled
  **/
  @ApiModelProperty(value = "")
  public IdTokenEncryptionEnabled getDefaultMaxAgeEnabled() {
    return defaultMaxAgeEnabled;
  }

  public void setDefaultMaxAgeEnabled(IdTokenEncryptionEnabled defaultMaxAgeEnabled) {
    this.defaultMaxAgeEnabled = defaultMaxAgeEnabled;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreOpenIDClientConfig oauth2ClientCoreOpenIDClientConfig = (CoreOpenIDClientConfig) o;
    return Objects.equals(this.clientSessionUri, oauth2ClientCoreOpenIDClientConfig.clientSessionUri) &&
        Objects.equals(this.jwtTokenLifetime, oauth2ClientCoreOpenIDClientConfig.jwtTokenLifetime) &&
        Objects.equals(this.claims, oauth2ClientCoreOpenIDClientConfig.claims) &&
        Objects.equals(this.defaultMaxAge, oauth2ClientCoreOpenIDClientConfig.defaultMaxAge) &&
        Objects.equals(this.postLogoutRedirectUri, oauth2ClientCoreOpenIDClientConfig.postLogoutRedirectUri) &&
        Objects.equals(this.defaultMaxAgeEnabled, oauth2ClientCoreOpenIDClientConfig.defaultMaxAgeEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientSessionUri, jwtTokenLifetime, claims, defaultMaxAge, postLogoutRedirectUri, defaultMaxAgeEnabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2ClientCoreOpenIDClientConfig {\n");

    sb.append("    clientSessionUri: ").append(toIndentedString(clientSessionUri)).append("\n");
    sb.append("    jwtTokenLifetime: ").append(toIndentedString(jwtTokenLifetime)).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    defaultMaxAge: ").append(toIndentedString(defaultMaxAge)).append("\n");
    sb.append("    postLogoutRedirectUri: ").append(toIndentedString(postLogoutRedirectUri)).append("\n");
    sb.append("    defaultMaxAgeEnabled: ").append(toIndentedString(defaultMaxAgeEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

